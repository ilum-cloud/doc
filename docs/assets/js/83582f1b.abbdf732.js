"use strict";(self.webpackChunkilumdoc=self.webpackChunkilumdoc||[]).push([[966],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(a),d=n,h=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return a?r.createElement(h,o(o({ref:t},u),{},{components:a})):r.createElement(h,o({ref:t},u))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9001:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const i={title:"Architecture",sidebar_position:2},o=void 0,s={unversionedId:"architecture/architecture",id:"architecture/architecture",title:"Architecture",description:"Ilum is designed to bring the power of Apache Spark to Kubernetes environments, leveraging the best of both ecosystems. At its core, it aims to simplify the process of deploying, managing, and monitoring Spark jobs, irrespective of the underlying cluster manager.",source:"@site/docs/architecture/architecture.md",sourceDirName:"architecture",slug:"/architecture/",permalink:"/doc/architecture/",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Architecture",sidebar_position:2},sidebar:"docSidebar",previous:{title:"What is Ilum?",permalink:"/doc/"},next:{title:"Ilum Table",permalink:"/doc/architecture/ilum-table"}},l={},c=[{value:"Key Components",id:"key-components",level:2},{value:"Workflow",id:"workflow",level:2},{value:"Communication Types",id:"communication-types",level:2},{value:"Apache Kafka Communication",id:"apache-kafka-communication",level:3},{value:"gRPC Communication (default)",id:"grpc-communication-default",level:3},{value:"Cluster Types",id:"cluster-types",level:2},{value:"Kubernetes Cluster",id:"kubernetes-cluster",level:3},{value:"Yarn Cluster",id:"yarn-cluster",level:3},{value:"Local Cluster",id:"local-cluster",level:3},{value:"Scalability",id:"scalability",level:2},{value:"High Availability",id:"high-availability",level:2},{value:"Security",id:"security",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...i}=e;return(0,n.kt)(p,(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Ilum is designed to bring the power of Apache Spark to Kubernetes environments, leveraging the best of both ecosystems. At its core, it aims to simplify the process of deploying, managing, and monitoring Spark jobs, irrespective of the underlying cluster manager."),(0,n.kt)("p",null,"The idea of interactive Spark jobs is to give a user a possibility to run consecutive Spark jobs without a long Spark application initialization time. It wraps Spark application logic into a long-running Spark job which is able to handle calculation requests immediately."),(0,n.kt)("img",{src:a(7285).Z,alt:"Ilum",title:"Ilum",align:"center"}),(0,n.kt)("h2",{id:"key-components"},"Key Components"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"ilum-core"),": The central piece of the Ilum architecture is the ilum-core, which is responsible for creating, managing, and monitoring Spark jobs. It exposes REST APIs (conforming to OpenAPI 3.0 standard) for clients to interact with, and is responsible for scheduling and executing Spark jobs on the connected Kubernetes clusters.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"ilum-ui"),": This is a user-friendly web interface that allows users to manage and monitor Spark jobs. It communicates with the ilum-core via the REST APIs.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Kubernetes Cluster"),": Ilum integrates seamlessly with Kubernetes clusters, where Spark jobs are executed. Kubernetes is used as the cluster manager, and ilum-core deploys Spark jobs as Kubernetes pods.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Object Storage"),": Ilum integrates with Kubernetes-based object storage solutions, providing an alternative to Hadoop's HDFS. This allows storing and retrieving large volumes of data in a distributed and scalable manner.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"MongoDB"),": Ilum utilizes MongoDB as its internal database for storing job metadata, cluster information, and other operational data.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Apache Kafka"),": Kafka can be used as a communication layer in Ilum for reliable and efficient data streaming and processing."))),(0,n.kt)("h2",{id:"workflow"},"Workflow"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Users can submit Spark jobs via the Ilum UI or directly through the REST API. These jobs can be part of a long-running interactive session or batch jobs.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The ilum-core receives these requests, schedules the Spark jobs, and deploys them on the connected Kubernetes cluster.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The Spark jobs run as Kubernetes pods, scaling horizontally across the nodes of the Kubernetes cluster. The number of Spark executor pods can be controlled by the users.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Results from the Spark jobs are returned via the ilum-core and can be viewed on the Ilum UI or fetched via the REST API.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"For storing and retrieving data, the Spark jobs can utilize the integrated object storage, which behaves like an S3-compatible storage solution."))),(0,n.kt)("h2",{id:"communication-types"},"Communication Types"),(0,n.kt)("p",null,"Ilum supports two primary forms of communication between Spark jobs and the ilum-core: Apache Kafka and gRPC."),(0,n.kt)("h3",{id:"apache-kafka-communication"},"Apache Kafka Communication"),(0,n.kt)("p",null,"Ilum's integration with Apache Kafka facilitates reliable and scalable communication, supporting all of Ilum's features, including High Availability (HA) and scalability. All event exchanges are conducted via automatically created topics using Apache Kafka brokers."),(0,n.kt)("h3",{id:"grpc-communication-default"},"gRPC Communication (default)"),(0,n.kt)("p",null,"As an alternative, gRPC can be used for communication. This option simplifies the deployment process by eliminating the need for Apache Kafka during installation. gRPC establishes direct connections between ilum-core and Spark jobs, removing the requirement for a separate message broker. However, using gRPC does not support High Availability (HA) for ilum-core under the current implementation. While ilum-core can be scaled, existing Spark jobs will continue communicating with the same ilum-core instances."),(0,n.kt)("h2",{id:"cluster-types"},"Cluster Types"),(0,n.kt)("p",null,"Ilum simplifies Spark cluster configuration, and once configured, the cluster can be used for various jobs, irrespective of their type or quantity. Ilum currently supports three types of clusters: Kubernetes, Yarn, and Local."),(0,n.kt)("h3",{id:"kubernetes-cluster"},"Kubernetes Cluster"),(0,n.kt)("p",null,"Ilum's primary focus is to facilitate easy integration between Spark and Kubernetes. It simplifies the configuration and launch of Spark applications on Kubernetes. To connect to an existing Kubernetes cluster, users need to provide default configuration information, such as the Kubernetes API URL and authentication parameters. Ilum supports both user/password and certificate-based authentication methods. Multiple Kubernetes clusters can be managed by Ilum, provided they are accessible. This feature enables the creation of a hub for managing numerous Spark environments from a single location."),(0,n.kt)("h3",{id:"yarn-cluster"},"Yarn Cluster"),(0,n.kt)("p",null,"Ilum also supports Apache Yarn clusters, which can be easily configured using Yarn configuration files present in the Yarn installation."),(0,n.kt)("h3",{id:"local-cluster"},"Local Cluster"),(0,n.kt)("p",null,"The local cluster type runs Spark applications where ilum-core is deployed, meaning it runs Spark applications either inside the ilum-core container when deployed on Docker/Kubernetes, or on the host machine when deployed without an orchestrator. This cluster type is suitable for testing purposes due to its resource limitations."),(0,n.kt)("h2",{id:"scalability"},"Scalability"),(0,n.kt)("p",null,"ilum-core was designed with scalability in mind. Being completely stateless, ilum-core can recover its entire existing state after a crash, making it easy to scale up or down based on load requirements."),(0,n.kt)("h2",{id:"high-availability"},"High Availability"),(0,n.kt)("p",null,"ilum-core and its required components support High Availability (HA) deployments. Ilum, MongoDB, Apache Kafka, and MinIO can be configured to provide a fully high availability environment. Note that an HA deployment necessitates the use of Apache Kafka as the communication type, as using gRPC does not support HA."),(0,n.kt)("h2",{id:"security"},"Security"),(0,n.kt)("p",null,"Ilum incorporates a straightforward mechanism to secure access to the ilum-ui web console. It allows for the setting of a default admin username and password during deployment. Currently, security measures apply only to the ilum-ui web console."))}m.isMDXComponent=!0},7285:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/ilum_spark_microservice-600cd3376d2b7074de2b5ab00410d919.gif"}}]);