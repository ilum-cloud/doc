"use strict";(self.webpackChunkilumdoc=self.webpackChunkilumdoc||[]).push([[559],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>N});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),u=o(a),s=r,N=u["".concat(p,".").concat(s)]||u[s]||k[s]||l;return a?n.createElement(N,i(i({ref:t},d),{},{components:a})):n.createElement(N,i({ref:t},d))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=s;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[u]="string"==typeof e?e:r,i[1]=m;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},2660:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>m,toc:()=>o});var n=a(7462),r=(a(7294),a(3905));const l={title:"Ilum Core"},i=void 0,m={unversionedId:"configuration/ilum-core",id:"configuration/ilum-core",title:"Ilum Core",description:"Ilum Core helm chart config.",source:"@site/docs/configuration/ilum-core.md",sourceDirName:"configuration",slug:"/configuration/ilum-core",permalink:"/configuration/ilum-core",draft:!1,tags:[],version:"current",frontMatter:{title:"Ilum Core"},sidebar:"docSidebar",previous:{title:"All in one",permalink:"/configuration/ilum-all-in-one"},next:{title:"Ilum UI",permalink:"/configuration/ilum-ui"}},p={},o=[{value:"TL;DR",id:"tldr",level:2},{value:"Installing the Chart",id:"installing-the-chart",level:2},{value:"Uninstalling the Chart",id:"uninstalling-the-chart",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Common parameters",id:"common-parameters",level:3},{value:"ilum-core deployment parameters",id:"ilum-core-deployment-parameters",level:3},{value:"ilum-core communication parameters",id:"ilum-core-communication-parameters",level:3},{value:"ilum-core service parameters",id:"ilum-core-service-parameters",level:3},{value:"ilum-core ingress parameters",id:"ilum-core-ingress-parameters",level:3},{value:"ilum-core livenessProbe/readinessProbe parameters",id:"ilum-core-livenessprobereadinessprobe-parameters",level:3},{value:"ilum-core mongo parameters",id:"ilum-core-mongo-parameters",level:3},{value:"ilum-core kafka parameters",id:"ilum-core-kafka-parameters",level:3},{value:"ilum-core grpc service parameters",id:"ilum-core-grpc-service-parameters",level:3},{value:"ilum-core grpc parameters for spark job",id:"ilum-core-grpc-parameters-for-spark-job",level:3},{value:"ilum-core kubernetes cluster initializer parameters",id:"ilum-core-kubernetes-cluster-initializer-parameters",level:3},{value:"ilum-core security parameters",id:"ilum-core-security-parameters",level:3},{value:"ilum-core Internal config-map based authentication security parameters",id:"ilum-core-internal-config-map-based-authentication-security-parameters",level:3},{value:"ilum-core LDAP based authentication security parameters",id:"ilum-core-ldap-based-authentication-security-parameters",level:3},{value:"ilum-core OAuth2 based authentication security parameters",id:"ilum-core-oauth2-based-authentication-security-parameters",level:3},{value:"ilum-core license parameters",id:"ilum-core-license-parameters",level:3}],d={toc:o},u="wrapper";function k(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Ilum Core helm chart config."),(0,r.kt)("h2",{id:"tldr"},"TL;DR"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm repo add ilum https://charts.ilum.cloud\n$ helm install ilum-core ilum/ilum-core\n")),(0,r.kt)("h2",{id:"installing-the-chart"},"Installing the Chart"),(0,r.kt)("p",null,"To install the chart with the release name ",(0,r.kt)("inlineCode",{parentName:"p"},"ilum-core"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm install ilum-core ilum/ilum-core\n")),(0,r.kt)("p",null,"The command deploys ",(0,r.kt)("inlineCode",{parentName:"p"},"ilum-core")," on the Kubernetes cluster in the default configuration. The ",(0,r.kt)("a",{parentName:"p",href:"#parameters"},"Parameters"),"\nsection lists the parameters that can be configured during installation."),(0,r.kt)("h2",{id:"uninstalling-the-chart"},"Uninstalling the Chart"),(0,r.kt)("p",null,"To uninstall/delete the ",(0,r.kt)("inlineCode",{parentName:"p"},"ilum-core")," deployment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ helm delete ilum-core\n")),(0,r.kt)("p",null,"The command removes all the Kubernetes components associated with the chart and deletes the release."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("h3",{id:"common-parameters"},"Common parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nameOverride")),(0,r.kt)("td",{parentName:"tr",align:null},"String to partially override ilum-core.fullname template (will maintain the release name)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fullnameOverride")),(0,r.kt)("td",{parentName:"tr",align:null},"String to fully override ilum-core.fullname template"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))))),(0,r.kt)("h3",{id:"ilum-core-deployment-parameters"},"ilum-core deployment parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"image")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core image"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ilum/core:5.2.0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pullPolicy")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core image pull policy"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IfNotPresent"))))),(0,r.kt)("h3",{id:"ilum-core-communication-parameters"},"ilum-core communication parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"communication.type")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core communication type with spark jobs, available options: ",(0,r.kt)("inlineCode",{parentName:"td"},"grpc"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"kafka")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpc"))))),(0,r.kt)("h3",{id:"ilum-core-service-parameters"},"ilum-core service parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"service.type")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core service type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ClusterIP"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"service.port")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core service port"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"9888"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"service.nodePort")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core service node port - required when ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"LoadBalancer")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"NodePort")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"service.clusterIP")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core service cluster IP - required when ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"ClusterIP")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"service.loadBalancerIP")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core service load balancer IP - required when ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"LoadBalancer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))))),(0,r.kt)("h3",{id:"ilum-core-ingress-parameters"},"ilum-core ingress parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.enabled")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress enabled flag"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.version")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress version"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"v1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.className")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress class name"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.host")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress host"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"host"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.tls")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress tls configuration"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.tls[x].secretName")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress secret name to apply for a single tls configuration entry"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.tls[x].hosts")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress hosts list to apply for a single tls configuration entry"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.annotations")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress annotations in yaml format"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nginx.ingress.kubernetes.io/rewrite-target: /$1"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},'nginx.ingress.kubernetes.io/proxy-body-size: "600m"'),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},'nginx.org/client-max-body-size: "600m"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.path")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress path"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/(.*)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ingress.pathType")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core ingress pathType"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Prefix"))))),(0,r.kt)("h3",{id:"ilum-core-livenessprobereadinessprobe-parameters"},"ilum-core livenessProbe/readinessProbe parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"readinessProbe")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core readinessProbe configuration"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("pre",null,"readinessProbe:",(0,r.kt)("br",null),"  failureThreshold: 3",(0,r.kt)("br",null),"  httpGet:",(0,r.kt)("br",null),"    path: /api/dev/reactive/health",(0,r.kt)("br",null),"    port: http",(0,r.kt)("br",null),"    scheme: HTTP",(0,r.kt)("br",null),"  initialDelaySeconds: 60",(0,r.kt)("br",null),"  periodSeconds: 10",(0,r.kt)("br",null),"  successThreshold: 1",(0,r.kt)("br",null),"  timeoutSeconds: 1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"livenessProbe")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core livenessProbe configuration"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("pre",null,"livenessProbe:",(0,r.kt)("br",null),"  failureThreshold: 3",(0,r.kt)("br",null),"  httpGet:",(0,r.kt)("br",null),"    path: /api/dev/reactive/health",(0,r.kt)("br",null),"    port: http",(0,r.kt)("br",null),"    scheme: HTTP",(0,r.kt)("br",null),"  initialDelaySeconds: 60",(0,r.kt)("br",null),"  periodSeconds: 10",(0,r.kt)("br",null),"  successThreshold: 1",(0,r.kt)("br",null),"  timeoutSeconds: 1"))))),(0,r.kt)("h3",{id:"ilum-core-mongo-parameters"},"ilum-core mongo parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mongo.instances")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core mongo instances to connect to"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mongo:27017"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mongo.replicaSetName")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core mongo replica set name"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rs0"))))),(0,r.kt)("h3",{id:"ilum-core-kafka-parameters"},"ilum-core kafka parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kafka.address")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core kafka address to connect to"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kafka:9092"))))),(0,r.kt)("h3",{id:"ilum-core-grpc-service-parameters"},"ilum-core grpc service parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpc.service.type")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core grpc service type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ClusterIP"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpc.service.port")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core grpc service port"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"9999"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpc.service.nodePort")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core grpc service node port - required when ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"LoadBalancer")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"NodePort")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpc.service.clusterIP")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core grpc service cluster IP - required when ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"ClusterIP")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpc.service.loadBalancerIP")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core grpc service load balancer IP - required when ",(0,r.kt)("inlineCode",{parentName:"td"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"LoadBalancer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))))),(0,r.kt)("h3",{id:"ilum-core-grpc-parameters-for-spark-job"},"ilum-core grpc parameters for spark job"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpc.job.host")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core grpc host for spark job to connect to"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ilum-grpc"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"grpc.job.port")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core grpc port for spark job to connect to"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"9999"))))),(0,r.kt)("h3",{id:"ilum-core-kubernetes-cluster-initializer-parameters"},"ilum-core kubernetes cluster initializer parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes.initClusterOnStartup")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core default kubernetes cluster initialization flag"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes.api.url")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core default kubernetes cluster api url"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"https://kubernetes.default.svc"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes.container.image")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core default kubernetes cluster container image"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ilum/spark:3.4.1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes.sparkNamespace")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core default kubernetes cluster namespace to store spark resources"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{{ .Release.Namespace }}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes.s3.host")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core default kubernetes cluster S3 storage host to store spark resources"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"s3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes.s3.port")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core default kubernetes cluster S3 storage port to store spark resources"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"7000"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes.s3.bucket")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core default kubernetes cluster S3 storage bucket to store spark resources"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ilum-files"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes.s3.accessKey")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core default kubernetes cluster S3 storage access key to store spark resources"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"kubernetes.s3.secretKey")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core default kubernetes cluster S3 storage secret key to store spark resources"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important!")," Make sure S3 bucket is already created and reachable!"),(0,r.kt)("h3",{id:"ilum-core-security-parameters"},"ilum-core security parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.type")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core authentication type, available options: ",(0,r.kt)("inlineCode",{parentName:"td"},"internal"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ldap"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"oauth2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"internal"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.jwt.issuerUrl")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core frontend URI used in the jwt iss claim"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"https://ilum.cloud"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.jwt.timeToLive")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core jwt time to live in specified time units"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"8h"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.jwt.publicKey")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core base64 encoded string containing the X.509 RSA 2048 bit public key"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.jwt.privateKey")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core base64 encoded string containing the PKCS8 RSA 2048 bit private key"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.authorities")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core authorities mapping rules configuration. Used when authorization is ",(0,r.kt)("inlineCode",{parentName:"td"},"ldap")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"oauth2"),". Allows to translate external auth provider groups and scopes to ilum roles"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("pre",null,"authorities:",(0,r.kt)("br",null),"  roles:",(0,r.kt)("br",null),"    prefix: ROLE_",(0,r.kt)("br",null),"    claim-name: groups",(0,r.kt)("br",null)," scopes:",(0,r.kt)("br",null),"    prefix: SCOPE__",(0,r.kt)("br",null),"    claim-name: scp"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.authorities.roles.prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core authentication role prefix"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ROLE_"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.authorities.roles.claimName")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core external authentication provider ID of the jwt claim which contains list of roles/groups"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"groups"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.authorities.roles.mappings")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core role mapping definitions in form of a map ",(0,r.kt)("inlineCode",{parentName:"td"},"external_role: ilum_role")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.authorities.scopes.prefix")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core authentication scope prefix"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SCOPE_"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.authorities.scopes.claimName")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core external authentication provider ID of the jwt claim which contains list of scopes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"scp"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.authorities.scopes.mappings")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core scope mapping definitions in form of a map ",(0,r.kt)("inlineCode",{parentName:"td"},"external_scope: ilum_scope")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("h3",{id:"ilum-core-internal-config-map-based-authentication-security-parameters"},"ilum-core Internal config-map based authentication security parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.internal.users")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core internal users configuration"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("pre",null,"users:",(0,r.kt)("br",null),'  - username: "admin"',(0,r.kt)("br",null),'    password: "admin"',(0,r.kt)("br",null),"    roles:",(0,r.kt)("br",null),'      - "ADMIN"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.internal.users[].username")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core user username"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.internal.users[].password")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core user plain password"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.internal.users[].roles")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core user roles, available options: ",(0,r.kt)("inlineCode",{parentName:"td"},"ADMIN"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"USER"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"VIEWER")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))))),(0,r.kt)("h3",{id:"ilum-core-ldap-based-authentication-security-parameters"},"ilum-core LDAP based authentication security parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.urls")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP URLs of the server"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.base")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP base suffix from which all operations should originate"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.username")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP login username of the server"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.password")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP login password of the server"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.passwordEncoder")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP password encoder. LDAP server authenticates users (bind operations) if empty, available options: ",(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"adaptive")," - password encoder that delegates to another encoder based upon a ",(0,r.kt)("a",{parentName:"td",href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/password/DelegatingPasswordEncoder.html"},"prefixed identifier")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"bcrypt")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"md5")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"sha256")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.userSearch.base")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP base DN from which the search for an user should be performed"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.userSearch.filter")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP pattern to be used for the user search. {0} is the username"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uid={0}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.userSearch.passwordAttr")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP ID of the attribute which contains the password of a user"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"userPassword"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.groupSearch.base")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP base DN from which the search for group membership should be performed"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.groupSearch.filter")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP pattern to be used for the group search. {0} is the user's DN"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(member={0})"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.ldap.groupSearch.roleAttr")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core LDAP ID of the attribute which contains the role name for a group"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cn"))))),(0,r.kt)("h3",{id:"ilum-core-oauth2-based-authentication-security-parameters"},"ilum-core OAuth2 based authentication security parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.oauth2.clientId")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core oauth2 Client ID"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"security.oauth2.issuerUri")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum-core oauth2 URI that can either be an OpenID Connect discovery endpoint or an OAuth 2.0 Authorization Server Metadata endpoint defined by RFC 8414."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))))),(0,r.kt)("h3",{id:"ilum-core-license-parameters"},"ilum-core license parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"license.privateKey")),(0,r.kt)("td",{parentName:"tr",align:null},"ilum license key"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'""'))))))}k.isMDXComponent=!0}}]);