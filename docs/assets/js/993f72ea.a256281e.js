"use strict";(self.webpackChunkilumdoc=self.webpackChunkilumdoc||[]).push([[332],{3905:(e,t,o)=>{o.d(t,{Zo:()=>s,kt:()=>g});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var p=r.createContext({}),u=function(e){var t=r.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(o),h=n,g=c["".concat(p,".").concat(h)]||c[h]||m[h]||i;return o?r.createElement(g,a(a({ref:t},s),{},{components:o})):r.createElement(g,a({ref:t},s))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,a=new Array(i);a[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:n,a[1]=l;for(var u=2;u<i;u++)a[u]=o[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}h.displayName="MDXCreateElement"},1677:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=o(7462),n=(o(7294),o(3905));const i={title:"Authorization"},a=void 0,l={unversionedId:"security/authorization",id:"security/authorization",title:"Authorization",description:"This document outlines the available roles within our application and how to configure group to role mappings for LDAP",source:"@site/docs/security/authorization.md",sourceDirName:"security",slug:"/security/authorization",permalink:"/security/authorization",draft:!1,tags:[],version:"current",frontMatter:{title:"Authorization"},sidebar:"docSidebar",previous:{title:"Authentication",permalink:"/security/authentication"},next:{title:"Configuration",permalink:"/category/configuration"}},p={},u=[{value:"Available roles",id:"available-roles",level:2},{value:"Role mapping",id:"role-mapping",level:2},{value:"LDAP group to role mapping",id:"ldap-group-to-role-mapping",level:3},{value:"OAuth2 group to role mapping",id:"oauth2-group-to-role-mapping",level:3},{value:"Example configuring group claims in Azure AD",id:"example-configuring-group-claims-in-azure-ad",level:4}],s={toc:u},c="wrapper";function m(e){let{components:t,...o}=e;return(0,n.kt)(c,(0,r.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This document outlines the available roles within our application and how to configure group to role mappings for LDAP\nand OAuth2 authentication methods. Understanding these roles and how to map them correctly is crucial for managing\naccess control within the system."),(0,n.kt)("h2",{id:"available-roles"},"Available roles"),(0,n.kt)("p",null,"Our application supports three roles:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"ADMIN"),": This role grants full control over the application. Admins can create, view, and manage all resources,\nincluding those created by other users."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"USER"),": This role grants access to core application functionality. Users can create, view, and manage their own\nresources."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"VIEWER"),": This role provides read-only access to the application. Viewers can view all resources but cannot create\nor modify them.")),(0,n.kt)("h2",{id:"role-mapping"},"Role mapping"),(0,n.kt)("p",null,"If you're using internal authentication (the default method), you don't need to worry about role mapping. The\napplication will automatically assign the correct roles based on the configuration of the internal user accounts."),(0,n.kt)("p",null,"However, when using LDAP or OAuth2, you will need to map the groups from these systems to the roles within our\napplication."),(0,n.kt)("h3",{id:"ldap-group-to-role-mapping"},"LDAP group to role mapping"),(0,n.kt)("p",null,"For LDAP, groups assigned to the user within LDAP need to be mapped to our application's roles."),(0,n.kt)("p",null,"An example helm upgrade command for mapping LDAP ",(0,n.kt)("em",{parentName:"p"},"administrator")," and ",(0,n.kt)("em",{parentName:"p"},"developers")," groups to Ilum roles is shown below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"helm upgrade \\\n    --set ilum-core.security.authorities.roles.mappings.administrators=admin \\\n    --set ilum-core.security.authorities.roles.mappings.developers=user \\\n    --reuse-values ilum ilum/ilum\n")),(0,n.kt)("h3",{id:"oauth2-group-to-role-mapping"},"OAuth2 group to role mapping"),(0,n.kt)("p",null,"For OAuth2, you will need to map the group claims from the JWT token to the roles within our application."),(0,n.kt)("p",null,"An example helm upgrade command for mapping OAuth2 groups to roles is shown below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"helm upgrade \\\n    --set ilum-core.security.authorities.roles.mappings.8032fe76-2d7e-4178-9066-d38ee8536675=admin \\\n    --reuse-values ilum ilum/ilum\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},"Note:"),"\nTo utilize role-based authorization, your OAuth2 provider needs to include the user's group membership information in\nthe token claims. These are often referred to as ",(0,n.kt)("em",{parentName:"p"},"group claims"),". The configuration for this can vary between OAuth2\nproviders. Therefore, you should refer to your provider's documentation for precise instructions on how to do this.")),(0,n.kt)("h4",{id:"example-configuring-group-claims-in-azure-ad"},"Example configuring group claims in Azure AD"),(0,n.kt)("p",null,"Here is an example of how you can configure\n",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/active-directory/develop/optional-claims#configure-groups-optional-claims"},"group claims for Microsoft Azure AD"),":"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Sign in to the Azure portal."),(0,n.kt)("li",{parentName:"ol"},"Select Azure Active Directory."),(0,n.kt)("li",{parentName:"ol"},'In the left-hand navigation pane, select the "Azure Active Directory" service, select "App registrations", and then\nselect your application.'),(0,n.kt)("li",{parentName:"ol"},'In the application\'s blade, select "Token configuration", then select "Add groups claim".'),(0,n.kt)("li",{parentName:"ol"},"Select the groups you want to include in your token claims."),(0,n.kt)("li",{parentName:"ol"},'Select "Add".'),(0,n.kt)("li",{parentName:"ol"},"Don't forget to grant admin consent for the application to allow group membership claims.")),(0,n.kt)("p",null,"Once you've completed these steps, Azure AD will include the selected group's ID in the groups claim of the token when\nissuing tokens for the application. This information can then be used by our application to assign appropriate roles to\nusers based on their group membership in Azure AD."),(0,n.kt)("p",null,"The application needs to know which roles to assign to users based on these group IDs. For this, we utilize\nAuthorization Mapping configuration. It's a mechanism to map these Azure AD group IDs to the corresponding roles within\nour application."))}m.isMDXComponent=!0}}]);